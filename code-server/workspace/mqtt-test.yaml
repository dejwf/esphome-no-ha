esphome:
  name: mqtt-test
  friendly_name: mqtt-test

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
# api:
#   encryption:
#     key: "RpO/FdUbqrPATNrWeO01SN7IO+8nErSVAQuRrZe9JRA="

ota:
  password: "2323dc89de77543f27a070f72e0d4007"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Mqtt-Test Fallback Hotspot"
    password: "YPtNXf3wqzTW"

captive_portal:

mqtt:
  broker: 192.168.0.74
  port: 1883
  # username:
  # password:
  client_id: mqtt_test_esp32
  birth_message:
    topic: liv
    payload: online_and_kicking
  will_message:
    topic: demo
    payload: offline_and_leaving

# Example configuration entry 
# subscribe (listen) to a topic
sensor:
  - platform: mqtt_subscribe
    name: "Data from topic"
    id: mysensor
    topic: my/great/topic

# Example configuration entry with 2 sensors and filter
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 10s
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    id: wifi_signal_percentage
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"
    device_class: ""
    # publish to a topic on value change
    on_value:
      - mqtt.publish_json:
          topic: demo
          # send json with both values (dB & %)
          payload: |-
            root["wifi_signal_percentage"] = id(wifi_signal_percentage).state;
            root["wifi_signal_db"] = id(wifi_signal_db).state;